//file:noinspection GrUnresolvedAccess
//file:noinspection GroovyAssignabilityCheck
import org.gradle.api.tasks.testing.logging.TestLogEvent

buildscript {
    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }
}

plugins {
    id 'java'
    id 'checkstyle'
    id 'maven-publish'
    id 'java-library'
    id "jacoco"
    id "com.github.johnrengelman.shadow" version "7.1.0"
    id 'com.diffplug.spotless' version '5.0.0'
    id "com.github.spotbugs" version "4.7.1"
    id "net.ltgt.errorprone" version "2.0.1"
    id 'net.ltgt.nullaway' version "1.1.0"
    id "com.dorongold.task-tree" version "1.5"
}

group 'com.nosto'
version '2.1.2'

repositories {
    mavenCentral()
    maven {
        url 'https://maven.onehippo.com/maven2/'
    }
}

dependencies {
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.2.0'
    testRuntimeOnly group: 'org.junit.vintage', name: 'junit-vintage-engine', version: '5.2.0'
    testImplementation group: 'junit', name: 'junit', version: '4.12'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.0.0'
    testImplementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.8.2'
    testImplementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.8.2'
    testImplementation group: 'com.palantir.docker.compose', name: 'docker-compose-rule-junit4', version: '1.7.0'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.8.2'
    compileOnly group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.8.2'
    implementation group: 'redis.clients', name: 'jedis', version: '2.9.0'
    implementation group: 'commons-io', name: 'commons-io', version: '2.6'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.9.9'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.9'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.9.9'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'
    errorprone group: 'com.uber.nullaway', name: 'nullaway', version: '0.7.9'
    errorprone group: 'com.google.errorprone', name: 'error_prone_core', version: '2.3.4'
    spotbugsPlugins group: 'com.h3xstream.findsecbugs', name: 'findsecbugs-plugin', version: '1.10.1'
}

// Configuration for the nullaway extension. The rest of the parameters must be
// specified on the java-compile tasks. The only option that be specified here
// is the name of the root package to be analysed.
nullaway {
    //noinspection GrUnresolvedAccess
    annotatedPackages.add("com.nosto")
}

// Configuration for the Jacoco plugin. It seems that it isn't possible to define
// the output report formats here and those seem to be defined on the individual
// task level.
// I'm not sure why the tool version is defined here and it isn't managed as a
// dependency.
jacoco {
    toolVersion = "0.8.5"
}

// We only need the XML report so that the CI tools can parse it. The HTML isn't needed.
jacocoTestReport {
    reports {
        csv.enabled = true
        xml.enabled = false
        html.enabled = true
    }
}

test {
    useJUnitPlatform()
    testLogging.events.addAll([TestLogEvent.PASSED, TestLogEvent.SKIPPED, TestLogEvent.FAILED])
    reports {
        junitXml.enabled = true
        html.enabled = true
    }
    maxParallelForks = (int) (Runtime.runtime.availableProcessors() / 2 + 1)
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

javadoc {
    options.addBooleanOption('html5', true)
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set("sources")
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}

// Configuration for the Spotbugs plugin. It seems that it isn't possible to define
// the output report formats here and those seem to be defined on the individual
// task level.
// I'm not sure why the tool version is defined here and it isn't managed as a
// dependency.
spotbugs {
    //noinspection GroovyAccessibility,GrFinalVariableAccess,GroovyAssignabilityCheck
    toolVersion = '4.0.2'
    //noinspection GroovyAccessibility,GrFinalVariableAccess,GroovyAssignabilityCheck
    ignoreFailures = true
    //noinspection GroovyAccessibility,GrFinalVariableAccess,GroovyAssignabilityCheck
    effort = 'max'
    // Exclude all *.scala files as Spotbugs doesn't work too well with Scala.
    //noinspection GroovyAccessibility,GrFinalVariableAccess,GroovyAssignabilityCheck
    excludeFilter = file("$rootDir/gradle/config/spotbugs/exclude.xml")
}

// We only need the XML report so that the CI tools can parse it. The HTML isn't needed.
spotbugsMain {
    //noinspection GroovyAssignabilityCheck
    reports {
        xml.enabled = true
    }
}

// We only need the XML report so that the CI tools can parse it. The HTML isn't needed.
spotbugsTest {
    //noinspection GroovyAssignabilityCheck
    reports {
        xml.enabled = true
    }
}

// Configuration for the Checkstyle plugin. It seems that it isn't possible to define
// the output report formats here and those seem to be defined on the individual
// task level.
// I'm not sure why the tool version is defined here and it isn't managed as a
// dependency.
checkstyle {
    toolVersion "7.6.1"
    config rootProject.resources.text.fromFile("gradle/config/checkstyle/checkstyle.xml")
}

// We only need the XML report so that the CI tools can parse it. The HTML isn't needed
// and must be explicitly disabled
checkstyleMain {
    reports {
        xml.enabled = true
        html.enabled = false
    }
}

// We only need the XML report so that the CI tools can parse it. The HTML isn't needed.
checkstyleTest {
    reports {
        xml.enabled = true
        html.enabled = false
    }
}

publishing {
    repositories {
        maven {
            name = "github"
            url = uri("https://maven.pkg.github.com/nosto/lazysusan")
            credentials(PasswordCredentials)
        }
    }
    publications {
        //noinspection GroovyAssignabilityCheck
        mavenJava(MavenPublication) {
            //noinspection GroovyAssignabilityCheck
            from components.java

            pom {
                //noinspection GroovyAssignabilityCheck
                name = 'Lazy Susan'
                //noinspection GroovyAssignabilityCheck
                description = 'A round-robin message broker library backed by Redis'
                //noinspection GroovyAssignabilityCheck
                url = 'https://github.com/nosto/lazysusan'
                licenses {
                    license {
                        //noinspection GroovyAssignabilityCheck
                        name = 'The Apache License, Version 2.0'
                        //noinspection GroovyAssignabilityCheck
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                        //noinspection GroovyAssignabilityCheck
                        distribution = 'repo'
                    }
                }
                developers {
                    developer {
                        //noinspection GroovyAssignabilityCheck
                        id = 'gary-nosto'
                        //noinspection GroovyAssignabilityCheck
                        name = 'Gary Madden'
                        //noinspection GroovyAssignabilityCheck
                        email = 'gary.madden@nosto.com'
                    }
                }
                contributors {
                    contributor {
                        //noinspection GroovyAssignabilityCheck
                        id = 'mridang'
                        //noinspection GroovyAssignabilityCheck
                        name = 'Mridang Agarwalla'
                        //noinspection GroovyAssignabilityCheck
                        email = 'mridang.agarwalla@osto.com'
                    }
                }
                scm {
                    //noinspection GroovyAssignabilityCheck
                    connection = 'scm:git:git://github.com/nosto/lazysusan.git'
                    //noinspection GroovyAssignabilityCheck
                    developerConnection = 'scm:git:ssh://github.com/nosto/lazysusan.git'
                    //noinspection GroovyAssignabilityCheck
                    url = 'https://github.com/nosto/lazysusan'
                }
                issueManagement {
                    //noinspection GroovyAssignabilityCheck
                    system = "Github"
                    //noinspection GroovyAssignabilityCheck
                    url = "https://github.com/nosto/lazysusan/issues"
                }
            }
        }
    }
}

// Task for building the zip file for upload
task buildZip(type: Zip) {
    zip64 = true
    archiveBaseName.set(rootProject.name)
    from compileJava
    from processResources
    into('lib') {
        from configurations.runtimeClasspath
    }
}

shadowJar {
    zip64 true
}

build {
    dependsOn buildZip
}
